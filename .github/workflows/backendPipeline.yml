name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - "Backend/**"
      - ".github/workflows/backendPipeline.yml"

jobs:
  build-and-push:
    name: "Build and push backend image"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Mark repo as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Login to Docker hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./Backend
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/backend:latest

      - name: Deploy to EC2 via ssh
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_SSH_PRIVATE_KEY}}
          script: |
            echo "Creating ENV..."
            cat <<EOF > /home/ubuntu/Google-Photos-Clone/Backend/.env
            PORT=${{secrets.PORT}}
            ORIGIN=${{secrets.ORIGIN}}
            MONGODB=${{secrets.MONGODB}}
            NODEMAILER_EMAIL=${{secrets.NODEMAILER_EMAIL}}
            NODEMAILER_PASSWORD=${{secrets.NODEMAILER_PASSWORD}}
            ACCESSTOKEN_SECRET_KEY=${{secrets.ACCESSTOKEN_SECRET_KEY}}
            REFRESHTOKEN_SECRET_KEY=${{secrets.REFRESHTOKEN_SECRET_KEY}}
            REDIS_URL=${{secrets.REDIS_URL}}
            CLOUDINARY_CLOUD_NAME=${{secrets.CLOUDINARY_CLOUD_NAME}}
            CLOUDINARY_API_KEY=${{secrets.CLOUDINARY_API_KEY}}
            CLOUDINARY_API_SECRET=${{secrets.CLOUDINARY_API_SECRET}}
            CLOUDINARY_PREFIX=${{secrets.CLOUDINARY_PREFIX}}
            REDIS_HOST=redis
            REDIS_PORT=6379
            EOF
            echo "Pulling Docker Latest Image..."
            docker pull ${{secrets.DOCKER_USERNAME}}/backend:latest

            echo "Stopping and Removing Old Containers..."
            cd /home/ubuntu/Google-Photos-Clone/Backend
            sudo docker compose down

            echo "Clearing Docker Builder Cache..."
            sudo docker builder prune -af

            echo "Rebuilding and Starting Containers..."
            sudo docker compose up -d --build

      - name: Manual Git cleanup (optional)
        if: always()
        run: |
          git config --global --unset-all http.https://github.com/.extraheader || true
          git config --global --unset-all core.sshCommand || true
